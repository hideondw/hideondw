1.
1 10000001 
0.625*2 = 1.25
0.25*2 = 0.5
0.5*2 = 1.0
10000001.101
n = 7
1.0000001101 *2‚Å∂
Exponente = 7+127 = 134 = 10000110
Mantissa = 0000001101

Numero SIMPLE = 
1 10000110 00000011010000000000000
Numero DOBLE = 
1 10000000110 0000001101000000000000000000000000000000000000000000


2.
0 10000000000000000000000
0.45 * 2 = 0.9
0.9 * 2 = 1.8
0.8 * 2 = 1.6
0.6 * 2 = 1.2
0.5 * 2 = 1

10000000000000000000000.01111
n = 22
Exponente = 22+127 = 149 = 10010101
mantissa = 000000000000000000000001111
Numero = 0 10010101 000000000000000000000001111
La mantisa son 27 bits y solo pueden ser 23, por lo tanto el error es de 0.45
En el caso de tener doble precision si que podriamos implementarlo pues tenemos una mantisa de 52 bits

3.
Las 4 operaciones sirven para realizar operaciones en coma flotante.
flds i fstps respectivamente, uno se encarga de cargar un numero de coma flotante en el stack i el otro 
de quitarlo del stack i guardarlo donde corresponda.
Por otra parte, tanto fmuls como fadds se utilizan para multiplicar i sumar en coma flotante respectivamente.

4.
ASM1:
Hi ha 2 O.F., fmuls i fadds.
256 iteracions*2= 512
MFLOPS = 512/5.2 = 98.46 MFLOPS
3330 INSTRUCCIONS EN TOTAL
MIPS = 3330/5.2 = 640.38 MIPS

ASM2:
Hi ha 2 O.F., fmuls i fadds.
256*2=512
MFLOPS = 512/4.4 = 116.36 MFLOPS
1795 INSTRUCCIONS EN TOTAL
MIPS = 1795/4.4 = 407.95 MIPS

SPEEDUP = 5.2/4.4 = 1.18

A partir de los resultados obtenidos podemos reforzar el concepto de que ejecutar mas instrucciones por segundo
no tiene porque indicar que un programa sea mas rapido que otro. Esto se muestra en que ASM1 tiene un MIPS superior al de ASM2
pero en cambio ASM2 al tener los MFLOPS mas grandes que ASM1 tarda menos. Ademas denotan que el codigo seria de calculo
pues los MFLOPS son determinantes para el tiempo de ejecucion.